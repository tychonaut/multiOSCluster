#example template for exporting all view parameters
#pick the ones you need and create individual settings files for your IGs
#this is a comment
#macros are in ${}
#macros are case sensitive, no white spaces allowed
#first there is the settings section, nothing is written to file
## Actually, this should be ZXY, afater the pain with paraview and the confirmation in openSpace code.
## but whatever Vioso may think, I keep it like this, maybe the documenter 
## didn't get the "read right to left or bottom to top"- rule of matrix or quaternion multiplication"
## BUT KEEP THIS IN MIND IS STH. IS NOT RIGHT!
${!rotationOrder,YXZ}#rotationOrder,param=[XYZ,XZY,YXZ,YZX,ZXY,ZYX]
${!angles,degree}#angles,param=[degree,radian]
${!header}#start of file header, following is written first to the file


;;    Export of frusta from VIOSO Calibrator views, date: ${date,%Y%m%d%H%M%S}.#date,format=see strftime
;;
;;	WARNING: THIS FILE WILL BE CONTINUOUSLY OVERWRITTEN BY rsync!!111 
;;	Only edit it on a master machine, and check it into git. It will automatically distributed
;;	to the relevant cluster machines each launch of the script 
;;	<multiOSCluster dir>/appControl/OpenSpace/launch/cluster/launchOpenSpaceOnCluster..sh



;;; Default blend efficiencies.
;;; Heavily favor GPU skinning for unknown hardware.
SETTINGS {


${!channel}#!channel starts the channels section, this is written for every channel

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Own settings for a slave machine to come
	
	; ViewSync settings
	ViewSync/send = false
	ViewSync/receive = true

	; If send == true, sets the IP where the datagrams are sent
	; Can be a broadcast address
	ViewSync/hostname = 10.255.255.255
	ViewSync/port = 21567

	; For video caves, we typically want the slave screens to look to the
	; left or right (yawOffset) of where the master is looking
	; bug/convention inconsitency betweeen VIOSO and Google Earth:
	; Yaw angle must be negated: But this does not work for values already negative..
	; RTher is no way around hand work or an intermediate export and a non-trivial 
	; script!
	ViewSync/yawOffset = ${aY,0.5}
	
	ViewSync/pitchOffset = ${aX,0.5}
	ViewSync/rollOffset = ${aZ,0.5}
	
	; needs full horizontal angle , NOT half (left/right) angle;
	ViewSync/horizFov = ${fovH,0.5}
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

${!footer}#starts the footer, this is written at the end of the file, once all channels are written	

    CPUVertexBlendEfficiency = 1.2
    GPUVertexShaderPerfRating = 4.0
    GPUTLPerfRating = 1.0

    ; This tells Alchemy to release its references to images
    ; once they are loaded into texture memory.  The only draw-back
    ; to doing this is that igVisualContext::getTextureSource() no longer
    ; works.
    discardOriginalTextureImages = true

    ; Enable texture pooling in the visual context.  Configure the pool to hold
    ; at most 128 textures and accept textures no smaller than 32x32 and no
    ; larger than 256x256.
    enableTexturePooling = true
    texturePoolCapacity = 128
    texturePoolMinDimension = 32
    texturePoolMaxDimension = 256

    ; Enable hardware compression for images.
    Render/hardwareTextureCompression = true
    ; Use un-simplified water shader for desktop
    Render/useSimplifiedWaterShader=false

    useSoftwareVertexBlendingForCustomShaders = false

    ; This controls the building parameters if performance quality
    ; is enabled. It is disabled by default.
    PerformanceQuality/minNumBuildings = 50
    PerformanceQuality/minBuildingPerfScore = 0.5
    PerformanceQuality/maxNumBuildings = 150
    PerformanceQuality/maxBuildingPerfScore = 2.0
    PerformanceQuality/buildingScalingPower  = 1

    Maps/docsAutoUploadEnabled = true

    ; Use GLSL shaders and fixed-function in Alchemy emulation.
    ; Platforms that don't support GLSL will fall back to ARB shaders
    ; and/or normal OGL fixed-function.
    emulateFixedFunctionWithGL2Shaders = true
    Render/enableGLSLShaders = true

    enableMipmaps = true

    ; Turn on VBO support for OGL.
    enableVertexBufferObjects = true
    ; Only use VBOs for some of the vertex arrays.
    geometryUsesVBOByDefault = false
}

OS = linux {
    SETTINGS {
        onlyOGL = true

        ; Use point and line smoothing only on Linux, since it doesn’t
        ; work well with multisampling and we don’t support multisampling
        ; on Linux yet.
        Render/pointAndLineSmoothEnable = true
    }

    ; OpenGl version 2.0 or newer is needed for GLSL shaders, so display an
    ; error message if only version 1.x is available.
    ; NOTE: PLATFORM_VERSION is checked using a string compare (as opposed
    ; to a numerical compare).  The >= operator checks that the version
    ; string begins with "1.".
    PLATFORM_VERSION >= 1. {
        SETTINGS {
            cantRun = true
        }
    }
}


OS = macos {
    SETTINGS {
        onlyOGL = true
    }
}


OS = win_nt {
    ;=============================================================================
    ; OPENGL
    ;=============================================================================

    PLATFORM = ogl {
        ; OpenGl version 2.0 or newer is needed for GLSL shaders, so force
        ; 1.X versions of OGL into DX mode.
        ; NOTE: PLATFORM_VERSION is checked using a string compare (as opposed
        ; to a numerical compare).  The >= operator checks that the version
        ; string begins with "1.".
        PLATFORM_VERSION >= 1. {
            SETTINGS {
                forceDX = true
            }
        }

        GFX_CAPABILITY(IG_GFX_CAPABILITY_GL2_SHADERS_SUPPORTED) = 0 {
          SETTINGS {
            cantRun = true
            recommendDX = true
          }
        }
    }

    ;=============================================================================
    ; OPENGL ES 2.0
    ;=============================================================================
    PLATFORM = ogles20 {
        GFX_CAPABILITY(IG_GFX_CAPABILITY_GL2_SHADERS_SUPPORTED) = 0 {
          SETTINGS {
            cantRun = true
            recommendOGL = true
          }
        }
    }
} ; END of win_nt

